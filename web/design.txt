<Framework Structure>
Model Classes -> Handle data, used to represent Users, Blog Posts, Images, etc.
View Classes -> Handle HTML and events caused by the user (like clicks).

<Extration Approach>
Build class User as a 'mega' class with tons of methods ->
Refactor User to use composition ->
Refactor User to be a reusable class that can represent any piece of data, not just a User

see what we need to make that happen /not too specific /just like a mega view /

<class User>
private data: UserProps -> Object to store information about a particular user (name, age)
get(propName: string): (string | number) -> Gets a single piece of info about this user (name, age)
set(update: UserProps): void -> Changes information about this user (name, age)
on(eventName: string, callback: () => {}) ->Registers an event handler with this object, so other parts of
                                            the app know when something changes
trigger(eventName: string): void -> Triggers an event to tell other parts of the app that something has
                                    changed
fetch(): Promise -> Fetches some data from the server about a particular user
save(): Promise -> Save some data about this user to the server

Serialize -> Convert data from an object into some save-able format(json)
Deserialize -> Put data on an object using some previously saved data(json) 